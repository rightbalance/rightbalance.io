[{"data":1,"prerenderedAt":1988},["Reactive",2],{"solutions-element-ci-cd-like-ac-dc-rock-n-roll-with-continuous-integration-and-continuous-delivery":3,"solutions":331},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":7,"tags":9,"related_content":14,"short_title":15,"header_one":15,"header_two":16,"icon":17,"cta_header":18,"body":19,"_type":326,"_id":327,"_source":328,"_file":329,"_extension":330},"/solutions/ci-cd-like-ac-dc-rock-n-roll-with-continuous-integration-and-continuous-delivery","solutions",false,"","CI/CD like AC‚ö°Ô∏èDC: Rock‚Äôn‚ÄôRoll with Continuous Integration and Continuous Delivery",[10,11,12,13],"cicd","ci","cd","solution",[],"CI / CD","Pipelines","pipe-disconnected","Have any questions about CI/CD?",{"type":20,"children":21,"toc":300},"root",[22,31,50,57,72,78,83,89,95,100,106,111,117,122,128,133,142,148,153,159,164,170,175,181,186,192,197,203,209,222,228,233,239,284,290,295],{"type":23,"tag":24,"props":25,"children":27},"element","h2",{"id":26},"what-is-cicd",[28],{"type":29,"value":30},"text","What is CI/CD",{"type":23,"tag":32,"props":33,"children":34},"p",{},[35,37,48],{"type":29,"value":36},"CI/CD is an abbreviation for Continuous Integration and Continuous Delivery. It‚Äôs a process of delivering your code continuously using an automated pipeline as opposed to doing a manual one ",{"type":23,"tag":38,"props":39,"children":45},"a",{":target":40,"href":41,"rel":42,"title":44},"\\_blank","https://svpg.com/big-bang-releases/",[43],"nofollow","Big bang deployment overview",[46],{"type":29,"value":47},"big bang",{"type":29,"value":49}," waterfall deployment.",{"type":23,"tag":51,"props":52,"children":54},"h3",{"id":53},"continuous-integration",[55],{"type":29,"value":56},"Continuous Integration",{"type":23,"tag":32,"props":58,"children":59},{},[60,62,70],{"type":29,"value":61},"Most of the software teams use a source control system like Git. We‚Äôve several different branching strategies like ",{"type":23,"tag":38,"props":63,"children":67},{":target":40,"href":64,"rel":65,"title":66},"https://nvie.com/posts/a-successful-git-branching-model/",[43],"Git flow branching strategy",[68],{"type":29,"value":69},"Git Flow",{"type":29,"value":71},". All of the strategies have one thing in common. There is a single mainline development branch. Each developer creates his/her own branch of the mainline and works independently on a feature. Once the feature is ready, the code is reviewed and merged back to the mainline.",{"type":23,"tag":51,"props":73,"children":75},{"id":74},"continuous-delivery",[76],{"type":29,"value":77},"Continuous Delivery",{"type":23,"tag":32,"props":79,"children":80},{},[81],{"type":29,"value":82},"Now that the code is merged into the mainline, we need to go through the rest of the steps like deploying it, doing QA, and eventually, pushing the new code to production to serve some real users. Each step involves some build process that has to happen to build, test, and deliver the code to the right place. This is where an automated pipeline comes into play where each step is automated following some established conventions everyone on the team follows.",{"type":23,"tag":24,"props":84,"children":86},{"id":85},"advantages-of-using-cicd",[87],{"type":29,"value":88},"Advantages of using CI/CD",{"type":23,"tag":51,"props":90,"children":92},{"id":91},"speed",[93],{"type":29,"value":94},"Speed",{"type":23,"tag":32,"props":96,"children":97},{},[98],{"type":29,"value":99},"The main advantage of CI/CD is the increase in velocity. Once you have the process and the pipeline in place, you‚Äôll be able to ship your changes faster. As with any process, it‚Äôs just more efficient to do the same steps over and over again rather than shipping changes ad-hoc differently each time. It removes the need for extra communication between the team members and between different teams. Everyone follows the same process. Developers know where to merge to code. QA team knows where to get a new build to test. It‚Äôs clear how to deploy to each environment including production and how to troubleshoot some issues.",{"type":23,"tag":51,"props":101,"children":103},{"id":102},"quality",[104],{"type":29,"value":105},"Quality",{"type":23,"tag":32,"props":107,"children":108},{},[109],{"type":29,"value":110},"CI/CD brings some automation allowing you to take advantage of automated tests, having your compiler catch bugs, and your automated deployments exercising your infrastructure. With all the automation in place, you start investing in the health of your system, getting some dividends with each test added instead of playing catchup using some manual testing. Every run of your pipeline runs hundreds (and sometimes even more) of automated tests to make sure your product is rock solid when it comes to production.",{"type":23,"tag":51,"props":112,"children":114},{"id":113},"consistency",[115],{"type":29,"value":116},"Consistency",{"type":23,"tag":32,"props":118,"children":119},{},[120],{"type":29,"value":121},"As we all know, humans are inconsistent, and computers are great at doing the same thing over and over again. No human will be able to build, test, and deploy your changes multiple times a day consistently. Automated pipelines, when done right, always work for you. Consistency makes your compliance process easier to maintain. And while the CI server is running your pipeline, you have your developers writing some new features. Which is more fun than building and deploying anyway üòâ.",{"type":23,"tag":24,"props":123,"children":125},{"id":124},"anatomy-of-a-cicd-pipeline",[126],{"type":29,"value":127},"Anatomy of a CI/CD Pipeline",{"type":23,"tag":32,"props":129,"children":130},{},[131],{"type":29,"value":132},"Most of the automated pipelines consist of the following major steps:",{"type":23,"tag":32,"props":134,"children":135},{},[136],{"type":23,"tag":137,"props":138,"children":141},"img",{"alt":139,"src":140},"A typical CI/CD pipeline","https://images.rightbalance.io/uploads/cicd-pipeline.svg",[],{"type":23,"tag":51,"props":143,"children":145},{"id":144},"build",[146],{"type":29,"value":147},"Build",{"type":23,"tag":32,"props":149,"children":150},{},[151],{"type":29,"value":152},"While developers make their changes, we want to make sure the code builds into a runnable product. Here, we run a compiler and/or linter for scripting based languages to make sure we‚Äôre able to run the code.",{"type":23,"tag":51,"props":154,"children":156},{"id":155},"test",[157],{"type":29,"value":158},"Test",{"type":23,"tag":32,"props":160,"children":161},{},[162],{"type":29,"value":163},"The next step is to test your code. We run our automated tests to make sure the code we built does what we expect it to do. At this step, we‚Äôll catch any bugs that happen along the way so the developer can fix them early in the process before they go out to the real world.",{"type":23,"tag":51,"props":165,"children":167},{"id":166},"deploy",[168],{"type":29,"value":169},"Deploy",{"type":23,"tag":32,"props":171,"children":172},{},[173],{"type":29,"value":174},"Now the code is built and tested, let‚Äôs go ahead and deploy it to a real environment. We‚Äôll package the code for deployment including the necessary libraries and the configuration. Once it‚Äôs ready for us to push, we deploy it directly to the cloud provider using their API.",{"type":23,"tag":51,"props":176,"children":178},{"id":177},"verify",[179],{"type":29,"value":180},"Verify",{"type":23,"tag":32,"props":182,"children":183},{},[184],{"type":29,"value":185},"Once the code is deployed, we‚Äôll run some comprehensive, non-destructive tests against a deployed environment to make sure the code runs in the cloud the way we expect it to run.",{"type":23,"tag":51,"props":187,"children":189},{"id":188},"notify",[190],{"type":29,"value":191},"Notify",{"type":23,"tag":32,"props":193,"children":194},{},[195],{"type":29,"value":196},"Once the pipeline is finished running, we notify the developer of the successful deployment. Most of the notifications go to slack or email. Important to note that if failures happen along the way, the pipeline notifies the developer of the failed step so the action can be taken promptly.",{"type":23,"tag":24,"props":198,"children":200},{"id":199},"how-you-can-implement-cicd",[201],{"type":29,"value":202},"How You Can Implement CI/CD",{"type":23,"tag":51,"props":204,"children":206},{"id":205},"lock-in-your-branching-strategy",[207],{"type":29,"value":208},"Lock in Your Branching Strategy",{"type":23,"tag":32,"props":210,"children":211},{},[212,214,220],{"type":29,"value":213},"We recommend following ",{"type":23,"tag":38,"props":215,"children":218},{":target":40,"href":64,"rel":216,"title":217},[43],"Git Flow Overview",[219],{"type":29,"value":69},{"type":29,"value":221}," or some variation of it. Making sure everyone follows the same process for branching makes everything easier. If you have multiple environments (like development, staging, and production) you may want to name your branches the same way so it‚Äôs easy to map the branches to the environments the code should be deployed to.",{"type":23,"tag":51,"props":223,"children":225},{"id":224},"build-test-deploy",[226],{"type":29,"value":227},"Build, Test, Deploy",{"type":23,"tag":32,"props":229,"children":230},{},[231],{"type":29,"value":232},"Chances are, you either already have a way to build, test, and deploy your code. The goal here is to distill it down to a single command you can run from your terminal. If your build process involves running multiple commands, no problem, we‚Äôll just write a build script running each step. If you don‚Äôt have automated tests, the best first step is to set up a testing framework and add it to the CI pipeline. Once tests run automatically, it‚Äôs easy to add them one by one gradually. Last but not least, your deployment has to happen using a single command. What we‚Äôve seen in the past is that a lot of software teams end up with a large spreadsheet of steps to run for each release. Worry not, each of those massive spreadsheets can be distilled down to a single command step by step.",{"type":23,"tag":51,"props":234,"children":236},{"id":235},"pipeline-it",[237],{"type":29,"value":238},"Pipeline it",{"type":23,"tag":32,"props":240,"children":241},{},[242,244,252,254,262,264,272,274,282],{"type":29,"value":243},"Now you have all your steps in order, it‚Äôs easy to put it together into a pipeline. There are numerous technology choices starting from self-hosted options like ",{"type":23,"tag":38,"props":245,"children":249},{":target":40,"href":246,"rel":247,"title":248},"https://jenkins.io/",[43],"Jenkins Website",[250],{"type":29,"value":251},"Jenkins",{"type":29,"value":253}," all the way to some hosted solutions like ",{"type":23,"tag":38,"props":255,"children":259},{":target":40,"href":256,"rel":257,"title":258},"https://circleci.com/",[43],"CircleCI website",[260],{"type":29,"value":261},"CircleCI",{"type":29,"value":263}," and ",{"type":23,"tag":38,"props":265,"children":269},{":target":40,"href":266,"rel":267,"title":268},"https://azure.microsoft.com/en-us/services/devops/pipelines/",[43],"Azure Pipelines - CI/CD from Azure",[270],{"type":29,"value":271},"Azure Pipelines",{"type":29,"value":273},". It all depends on your system and your current technology stack. At this point, it comes down to either creating an account for a hosted CI provider or standing up Jenkins inside your infrastructure and wiring the steps together with some configuration files using YAML or similar configuration language. Yes, we want our infrastructure to ",{"type":23,"tag":38,"props":275,"children":279},{":target":40,"href":276,"rel":277,"title":278},"https://en.wikipedia.org/wiki/Infrastructure_as_code",[43],"IAC overview",[280],{"type":29,"value":281},"run as code",{"type":29,"value":283}," so we can stand it up at any time.",{"type":23,"tag":24,"props":285,"children":287},{"id":286},"conclusion",[288],{"type":29,"value":289},"Conclusion",{"type":23,"tag":32,"props":291,"children":292},{},[293],{"type":29,"value":294},"CI/CD is key to increasing velocity, developer productivity, and it‚Äôs just more fun to focus on features. Which in turn drives the business forward. If you‚Äôre in a manual world without the pipeline or perhaps even without the automated tests in place, starting on CI/CD route might seem like an overwhelming task. Worry not, with the right processes in place and some persistence, you‚Äôll get to a place where all you do is push some new code and let the pipeline do the rest of the magic.",{"type":23,"tag":32,"props":296,"children":297},{},[298],{"type":29,"value":299},"If you would like to get some help with implementing CI/CD into your organization, don‚Äôt hesitate to reach out. We‚Äôve done numerous automated CI/CD pipelines for mobile apps, websites, API services, ETL, Serverless systems, and more.",{"title":7,"searchDepth":301,"depth":301,"links":302},2,[303,308,313,320,325],{"id":26,"depth":301,"text":30,"children":304},[305,307],{"id":53,"depth":306,"text":56},3,{"id":74,"depth":306,"text":77},{"id":85,"depth":301,"text":88,"children":309},[310,311,312],{"id":91,"depth":306,"text":94},{"id":102,"depth":306,"text":105},{"id":113,"depth":306,"text":116},{"id":124,"depth":301,"text":127,"children":314},[315,316,317,318,319],{"id":144,"depth":306,"text":147},{"id":155,"depth":306,"text":158},{"id":166,"depth":306,"text":169},{"id":177,"depth":306,"text":180},{"id":188,"depth":306,"text":191},{"id":199,"depth":301,"text":202,"children":321},[322,323,324],{"id":205,"depth":306,"text":208},{"id":224,"depth":306,"text":227},{"id":235,"depth":306,"text":238},{"id":286,"depth":301,"text":289},"markdown","content:solutions:ci-cd-like-ac-dc-rock-n-roll-with-continuous-integration-and-continuous-delivery.md","content","solutions/ci-cd-like-ac-dc-rock-n-roll-with-continuous-integration-and-continuous-delivery.md","md",[332,620,990,1207,1525],{"_path":333,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":334,"description":7,"tags":335,"related_content":338,"short_title":339,"header_one":340,"header_two":341,"icon":342,"cta_header":343,"body":344,"_type":326,"_id":618,"_source":328,"_file":619,"_extension":330},"/solutions/api-development-scale-to-millions-of-users-with-a-robust-backend","API Development: Scale to Millions of Users With a Robust Backend",[336,337,13],"backend","api",[],"Backend API Development","Backend","API","cloud-tags","Have any questions about Backend API?",{"type":20,"children":345,"toc":605},[346,352,357,363,368,374,379,385,390,396,402,407,412,432,465,471,476,483,496,502,507,513,518,533,539,544,550,555,561,566,572,596,600],{"type":23,"tag":24,"props":347,"children":349},{"id":348},"what-is-backend-api",[350],{"type":29,"value":351},"What is Backend API",{"type":23,"tag":32,"props":353,"children":354},{},[355],{"type":29,"value":356},"Your backend API is a combination of your application servers, databases, and your infrastructure powering your client-side applications or your API consumers. A properly implemented backend API allows you to drink your IPA while your entire system works for you.",{"type":23,"tag":24,"props":358,"children":360},{"id":359},"api-anatomy",[361],{"type":29,"value":362},"API Anatomy",{"type":23,"tag":32,"props":364,"children":365},{},[366],{"type":29,"value":367},"Here is what a typical API looks like:",{"type":23,"tag":51,"props":369,"children":371},{"id":370},"api-gateway",[372],{"type":29,"value":373},"API Gateway",{"type":23,"tag":32,"props":375,"children":376},{},[377],{"type":29,"value":378},"When a client request comes from a web browser, mobile app, or a third party, the first place it goes to is an API Gateway. The goal of API Gateway is to route the request to a specific destination, which is a microservice most of the time. Depending on the API Gateway implementation, it can also handle user authentication and some request transformation before handing it off to the microservice. Last but not least, API Gateway handles the first level of security by routing a request coming from the public Internet to a private resource. Important to note that all resources behind the API Gateway like your microservices and database should remain private and not being exposed to the Internet. Only API Gateway should have the ability to route the right request from the public to the private territory.",{"type":23,"tag":51,"props":380,"children":382},{"id":381},"service-layer",[383],{"type":29,"value":384},"Service Layer",{"type":23,"tag":32,"props":386,"children":387},{},[388],{"type":29,"value":389},"That‚Äôs where the magic happens. Most of your business logic is contained at this level. If you have microservices architecture, different requests will go to different microservices. Depending on your use-case, your service can do any number of things like making a database query, calling another microservice or a 3rd party API, caching some data for future use, writing into a queue, or performing some computation.",{"type":23,"tag":24,"props":391,"children":393},{"id":392},"how-to-build-apis-right",[394],{"type":29,"value":395},"How to Build APIs Right",{"type":23,"tag":51,"props":397,"children":399},{"id":398},"architecture",[400],{"type":29,"value":401},"Architecture",{"type":23,"tag":32,"props":403,"children":404},{},[405],{"type":29,"value":406},"A properly architected system is at the core of a robust and scalable API. If your API is architected well, everything else comes together naturally. Your product will be able to support your level of traffic and you‚Äôll have a lot of happy customers.",{"type":23,"tag":32,"props":408,"children":409},{},[410],{"type":29,"value":411},"When designing your API, you‚Äôll need to minimize the following:",{"type":23,"tag":413,"props":414,"children":415},"ol",{},[416,422,427],{"type":23,"tag":417,"props":418,"children":419},"li",{},[420],{"type":29,"value":421},"A number of single points of failure (which is a database in most cases).",{"type":23,"tag":417,"props":423,"children":424},{},[425],{"type":29,"value":426},"A number of internal calls between services.",{"type":23,"tag":417,"props":428,"children":429},{},[430],{"type":29,"value":431},"Timing of each individual call.",{"type":23,"tag":32,"props":433,"children":434},{},[435,437,445,447,455,457,463],{"type":29,"value":436},"The main thing to realize is that each call results in a chain of events. While the work is happening the user is waiting for a response. Time and time again we‚Äôve seen a seemingly quick API call taking a long time or sometimes taking the system down. Everyone on the team needs to have a clear idea of which calls are made for each operation and which resources are used during each call. There are a lot of tools out there like ",{"type":23,"tag":38,"props":438,"children":442},{":target":40,"href":439,"rel":440,"title":441},"https://newrelic.com/",[43],"NewRelic website",[443],{"type":29,"value":444},"NewRelic",{"type":29,"value":446}," or ",{"type":23,"tag":38,"props":448,"children":452},{":target":40,"href":449,"rel":450,"title":451},"https://www.datadoghq.com/",[43],"DataDog page",[453],{"type":29,"value":454},"DataDog",{"type":29,"value":456}," that help you measure the timing of each individual call between services. You‚Äôll be able to fix the issues before the software gets pushed to prod by instrumenting your app and running some ",{"type":23,"tag":38,"props":458,"children":460},{":target":40,"href":459},"/solutions/automated-tests-get-dividends-with-every-test-run#load-tests",[461],{"type":29,"value":462},"load tests",{"type":29,"value":464}," against it in your testing environment.",{"type":23,"tag":51,"props":466,"children":468},{"id":467},"scalability",[469],{"type":29,"value":470},"Scalability",{"type":23,"tag":32,"props":472,"children":473},{},[474],{"type":29,"value":475},"Once the system is architected for scale, supporting more traffic or less traffic should be as simple as a configuration change. Here are the main things to consider:",{"type":23,"tag":477,"props":478,"children":480},"h4",{"id":479},"scaling-automatically",[481],{"type":29,"value":482},"Scaling Automatically",{"type":23,"tag":32,"props":484,"children":485},{},[486,488,494],{"type":29,"value":487},"Most of the cloud providers have auto-scaling capabilities based on certain rules you can specify. In addition to it, we recommend looking into ",{"type":23,"tag":38,"props":489,"children":491},{":target":40,"href":490},"/solutions/serverless-software-development-focus-on-features-instead-of-the-infrastructure",[492],{"type":29,"value":493},"Serverless tech",{"type":29,"value":495}," allowing for scaling automatically with the increase or decrease in traffic. If your server provisioning is manual at the moment, it‚Äôs worth thinking about automating it. This way you can spend your engineering resources on developing new features or improving the strength of the overall system instead of manually provisioning servers.",{"type":23,"tag":477,"props":497,"children":499},{"id":498},"minimize-service-chaining",[500],{"type":29,"value":501},"Minimize Service Chaining",{"type":23,"tag":32,"props":503,"children":504},{},[505],{"type":29,"value":506},"Especially with microservices, it‚Äôs easy to fall into a trap of ‚Äònano services‚Äô. Making your services too granular can lead to an increase in the number of inner service calls. It‚Äôs a good idea to avoid making one service call another service and so on and so forth. The longer the call chain, the greater the possibility of a failure at each step, and the overall call length increases too. In addition to it, debugging a call spanning across multiple services is much harder than debugging a single call to a single service.",{"type":23,"tag":477,"props":508,"children":510},{"id":509},"alerting-and-monitoring",[511],{"type":29,"value":512},"Alerting and Monitoring",{"type":23,"tag":32,"props":514,"children":515},{},[516],{"type":29,"value":517},"Alerting and monitoring is your best friend. It should be a part of the requirement for every feature. When your alerting and monitoring are properly set up you sleep better at night. It allows you to be more proactive about fixing the issues before they become problems. If something goes wrong, you‚Äôll get notified and you‚Äôll stay ahead of the game. This also increases the accountability of your team. The systems need to be developed so they always work without human intervention.",{"type":23,"tag":32,"props":519,"children":520},{},[521,523,531],{"type":29,"value":522},"A great book on a subject is ",{"type":23,"tag":38,"props":524,"children":528},{":target":40,"href":525,"rel":526,"title":527},"https://www.amazon.com/gp/product/0134032802/ref=as_li_qf_asin_il_tl?ie=UTF8&tag=howtoprogramb-20&creative=9325&linkCode=as2&creativeASIN=0134032802&linkId=55bea73bd8158a7441b84e4d4921bbb3",[43],"The art of scalability book",[529],{"type":29,"value":530},"Art of Scalability",{"type":29,"value":532},".",{"type":23,"tag":51,"props":534,"children":536},{"id":535},"cost-efficiency",[537],{"type":29,"value":538},"Cost Efficiency",{"type":23,"tag":32,"props":540,"children":541},{},[542],{"type":29,"value":543},"Your backend API is what makes your system scale to support a large number of users. With the increase in traffic comes the increase in cost. Therefore, when building your backend, you should be aware of the cost implications of your implementation decisions. We recommend focusing on the following areas:",{"type":23,"tag":477,"props":545,"children":547},{"id":546},"keeping-your-operational-database-slim",[548],{"type":29,"value":549},"Keeping your operational database slim",{"type":23,"tag":32,"props":551,"children":552},{},[553],{"type":29,"value":554},"The main purpose of your operational database is to serve the immediate API requests. Anything else adds to the database size, decreases the database availability, and makes scaling the database harder, especially for SQL databases.",{"type":23,"tag":477,"props":556,"children":558},{"id":557},"keeping-your-non-production-environments-small",[559],{"type":29,"value":560},"Keeping your non-production environments small",{"type":23,"tag":32,"props":562,"children":563},{},[564],{"type":29,"value":565},"Depending on your use-case, you‚Äôll need a number of different environments. For a simple scenario having just 3 environments works just fine (development, staging, and production). As your organization grows, you‚Äôll have more use cases you need to support and the number of environments will grow too. The key here is to have all production and pre-production environments with the same configuration. And all the rest of the systems with a scaled-down version of your resources to keep the cost down. In addition to it, using Serverless or Containers helps to minimize idle server time.",{"type":23,"tag":477,"props":567,"children":569},{"id":568},"using-the-right-tool-for-the-job",[570],{"type":29,"value":571},"Using the right tool for the job",{"type":23,"tag":32,"props":573,"children":574},{},[575,577,585,586,594],{"type":29,"value":576},"We‚Äôve seen many cases where a SQL database stores all application logs, acts as a search index for different kinds of queries, and even acts as a data warehouse while providing data for the API requests. There are solutions made specifically for each type of problem to solve. Logs can be archived into some flat files and processed offline. There are plenty of search solutions like ",{"type":23,"tag":38,"props":578,"children":582},{":target":40,"href":579,"rel":580,"title":581},"https://www.elastic.co/",[43],"Elastic Search page",[583],{"type":29,"value":584},"Elastic Search",{"type":29,"value":446},{"type":23,"tag":38,"props":587,"children":591},{":target":40,"href":588,"rel":589,"title":590},"https://www.algolia.com/",[43],"Algolia Website",[592],{"type":29,"value":593},"Algolia",{"type":29,"value":595},". A data warehouse needs to be separate from your runtime operational database so your data analyst doesn‚Äôt bring your runtime system down. Plus data warehouse users need the data in a different format. When using the right solution for each type of problem, you‚Äôll be able to provide a better experience for the users. You‚Äôll also have better control over your system cost.",{"type":23,"tag":24,"props":597,"children":598},{"id":286},[599],{"type":29,"value":289},{"type":23,"tag":32,"props":601,"children":602},{},[603],{"type":29,"value":604},"Your backend infrastructure is the heart of your system. It supports your client applications at scale. Architecting your backend system right makes everything else easier. Using the right tool for the job is key. There are specialized solutions for each type of problem. The goal is to build it so it always works with some comprehensive alerting and monitoring in place notifying you about the issues in advance. If you need some help with building a robust backend API, don‚Äôt hesitate to reach out.",{"title":7,"searchDepth":301,"depth":301,"links":606},[607,608,612,617],{"id":348,"depth":301,"text":351},{"id":359,"depth":301,"text":362,"children":609},[610,611],{"id":370,"depth":306,"text":373},{"id":381,"depth":306,"text":384},{"id":392,"depth":301,"text":395,"children":613},[614,615,616],{"id":398,"depth":306,"text":401},{"id":467,"depth":306,"text":470},{"id":535,"depth":306,"text":538},{"id":286,"depth":301,"text":289},"content:solutions:api-development-scale-to-millions-of-users-with-a-robust-backend.md","solutions/api-development-scale-to-millions-of-users-with-a-robust-backend.md",{"_path":621,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":622,"description":7,"tags":623,"related_content":626,"short_title":627,"header_one":627,"header_two":7,"icon":628,"cta_header":629,"body":630,"_type":326,"_id":988,"_source":328,"_file":989,"_extension":330},"/solutions/automated-tests-get-dividends-with-every-test-run","Automated Tests: Get Dividends With Every Test Run",[624,13,625],"automated testing","tests",[],"Automated Tests","flask-outline","Have any questions about Automated Testing?",{"type":20,"children":631,"toc":964},[632,638,643,649,655,660,675,681,686,692,697,703,718,724,729,735,740,746,751,757,762,768,774,779,785,790,796,801,807,819,825,857,863,868,873,879,915,921,946,950],{"type":23,"tag":24,"props":633,"children":635},{"id":634},"what-is-automated-testing",[636],{"type":29,"value":637},"What Is Automated Testing",{"type":23,"tag":32,"props":639,"children":640},{},[641],{"type":29,"value":642},"Traditional software development involves manual testing which works well on a small scale. That being said, once your team grows in size, engineers write more code, manually testing each new and existing feature is not effective anymore. Bugs get into production making customers unhappy. This is where automated testing comes in. Automated tests are a codified version of manual tests. The tests are written by engineers. Once they‚Äôre written they can run over and over again while your engineers are working on the text feature.",{"type":23,"tag":24,"props":644,"children":646},{"id":645},"advantages-of-automated-testing",[647],{"type":29,"value":648},"Advantages of Automated Testing",{"type":23,"tag":51,"props":650,"children":652},{"id":651},"write-robust-and-modular-code",[653],{"type":29,"value":654},"Write Robust and Modular Code",{"type":23,"tag":32,"props":656,"children":657},{},[658],{"type":29,"value":659},"This is perhaps one of the most important advantages of automated testing. What makes testing easier is structuring your code in a modular way. Modularizing your architecture allows you to swap out or refactor each module in isolation without affecting the rest of the system.",{"type":23,"tag":32,"props":661,"children":662},{},[663,665,673],{"type":29,"value":664},"In addition to your code being modular, your code will also be more robust. When running your tests with some randomized data or by using ",{"type":23,"tag":38,"props":666,"children":670},{"href":667,":target":40,"rel":668,"title":669},"https://en.wikipedia.org/wiki/Mutation_testing",[43],"Mutation Testing Overview",[671],{"type":29,"value":672},"mutation testing",{"type":29,"value":674},", your code gets executed under different conditions. Seeing the code you wrote fail under some conditions you didn‚Äôt think about is eye-opening. It allows you to account for more edge cases and make your code more robust.",{"type":23,"tag":51,"props":676,"children":678},{"id":677},"refactor",[679],{"type":29,"value":680},"Refactor",{"type":23,"tag":32,"props":682,"children":683},{},[684],{"type":29,"value":685},"Your product changes, your customer change, and your code need to change as a result of it. Refactoring makes changing your code easier. Automated tests allow you to make sure your code works as expected once the refactor is complete. This way you can refactor without any fear of breaking your already working system.",{"type":23,"tag":51,"props":687,"children":689},{"id":688},"minimize-bugs",[690],{"type":29,"value":691},"Minimize Bugs",{"type":23,"tag":32,"props":693,"children":694},{},[695],{"type":29,"value":696},"Automated tests catch bugs. With the constantly growing amount of code, we humans are not able to keep all code paths in our heads which leads to unexpected bugs. Automated tests help exercise all code paths involved so you can focus on the task at hand as opposed to constantly retesting the entire system and hypothesizing where it can break.",{"type":23,"tag":51,"props":698,"children":700},{"id":699},"tests-are-your-documentation",[701],{"type":29,"value":702},"Tests are Your Documentation",{"type":23,"tag":32,"props":704,"children":705},{},[706,708,716],{"type":29,"value":707},"Tests document the existing behavior of your system. When structured correctly, and especially with the use of ",{"type":23,"tag":38,"props":709,"children":713},{"href":710,":target":40,"rel":711,"title":712},"https://en.wikipedia.org/wiki/Behavior-driven_development#:~:text=In%20software%20engineering%2C%20behavior%2Ddriven,participants%20in%20a%20software%20project.",[43],"Behavior Driven Development",[714],{"type":29,"value":715},"BDD",{"type":29,"value":717}," syntax, your tests are your system documentation. You can use it to ramp up new engineers as well as a reference for how your system works in practice.",{"type":23,"tag":51,"props":719,"children":721},{"id":720},"tests-prove-that-your-system-works",[722],{"type":29,"value":723},"Tests Prove That Your System Works",{"type":23,"tag":32,"props":725,"children":726},{},[727],{"type":29,"value":728},"The code you write may be the greatest code ever and you may think it works. That being said, you never know if it actually works until it‚Äôs in production serving real customers. A green test suite is proof of your code working as expected as opposed to a guess or a good feeling that your system will work.",{"type":23,"tag":51,"props":730,"children":732},{"id":731},"get-dividends-with-each-test-run",[733],{"type":29,"value":734},"Get Dividends With Each Test Run",{"type":23,"tag":32,"props":736,"children":737},{},[738],{"type":29,"value":739},"Writing automated tests is an investment that pays dividends with every test run. Once the test is written, there is no need to execute it again manually. You can run an automated test at any time on-demand, or have it running automatically on every new code change. Every time you run it, it makes sure your system behaves the way it should.",{"type":23,"tag":24,"props":741,"children":743},{"id":742},"disadvantages-of-automated-testing",[744],{"type":29,"value":745},"Disadvantages of Automated Testing",{"type":23,"tag":32,"props":747,"children":748},{},[749],{"type":29,"value":750},"The main disadvantage of automated testing is that it makes a large sweeping change harder. If you‚Äôre writing a prototype, or your product didn‚Äôt achieve the product-market fit, then automated tests will get in the way of pivoting or making a full restructure change. Ironically, this is one of the most common reasons for not adopting automated testing. The teams we‚Äôve seen tried to do it too early. After having some bad experience with it, they stopped testing altogether and never came back to it. Only discovering later that they wrote a lot of tightly coupled code that is hard to test.",{"type":23,"tag":24,"props":752,"children":754},{"id":753},"efficient-testing-strategy",[755],{"type":29,"value":756},"Efficient Testing Strategy",{"type":23,"tag":32,"props":758,"children":759},{},[760],{"type":29,"value":761},"Our recommendation is to double down on unit tests, write fewer integration tests, and fewer UI/API tests. Why? Because unit tests are the easiest to write, fastest to run, easiest to parallelize, and it forces you to produce a robust baseline for your modular architecture. Integration and unit tests have some great coverage. On another hand it‚Äôs hard to write integration tests, they are slower and more brittle. Let‚Äôs go over each kind of test in detail.",{"type":23,"tag":24,"props":763,"children":765},{"id":764},"anatomy-of-automated-testing",[766],{"type":29,"value":767},"Anatomy of Automated Testing",{"type":23,"tag":51,"props":769,"children":771},{"id":770},"unit-tests",[772],{"type":29,"value":773},"Unit Tests",{"type":23,"tag":32,"props":775,"children":776},{},[777],{"type":29,"value":778},"Unit tests test a specific unit of code. They‚Äôre usually isolated testing a specific class, a specific function, or a small group of classes and functions. Unit Tests are usually written by the engineers while the functionality is implemented. Most of the business logic is covered by unit tests. Since the unit of code under each test is relatively small, you can set up different conditions for each test. It works especially well when setting up each test with some randomized data. Unit tests are quickest to run, they are the easiest to parallelize and optimize. We recommend writing most of your test cases at the unit test level.",{"type":23,"tag":51,"props":780,"children":782},{"id":781},"integration-tests",[783],{"type":29,"value":784},"Integration Tests",{"type":23,"tag":32,"props":786,"children":787},{},[788],{"type":29,"value":789},"While unit tests test each unit of code in isolation, an integration test tests how multiple units work together. Due to a higher level of complexity, these tests are usually slower to run, harder to set up, and harder to parallelize. It‚Äôs also harder to test boundary conditions because the test set up is more complicated. That‚Äôs why we recommend writing fewer cases and structuring your integration tests to cover a larger number of integration points in each test.",{"type":23,"tag":51,"props":791,"children":793},{"id":792},"ui-api-tests",[794],{"type":29,"value":795},"UI / API Tests",{"type":23,"tag":32,"props":797,"children":798},{},[799],{"type":29,"value":800},"UI Tests drive your GUI (i.e. click or tap actual buttons on the screen, etc) and API tests drive your API (i.e. sending real HTTP or GraphQL requests to your endpoints, etc). As you probably guessed UI or API tests are one of the slowest to run and the most complicated to set up. The reason is that they operate at the UI or API level which is usually just the tip of the iceberg. That being said, UI or API tests give you the most coverage for the number of tests. Here, we recommend going with a few happy paths to make sure everything behaves as needed, all screens render properly and all requests come back as normal.",{"type":23,"tag":51,"props":802,"children":804},{"id":803},"test-suite",[805],{"type":29,"value":806},"Test Suite",{"type":23,"tag":32,"props":808,"children":809},{},[810,812,817],{"type":29,"value":811},"Since you get the main benefit of automated tests when you execute it, your test suite is your best friend. The test suite runs all necessary tests in sequence parallelizing tests where it‚Äôs possible. Depending on your situation you may have several test suites running at different stages of the process. We recommend creating a robust ",{"type":23,"tag":38,"props":813,"children":814},{"href":4,":target":40},[815],{"type":29,"value":816},"CI/CD pipeline",{"type":29,"value":818}," which runs before merging your feature branches and when you deploy your code.",{"type":23,"tag":51,"props":820,"children":822},{"id":821},"load-tests",[823],{"type":29,"value":824},"Load Tests",{"type":23,"tag":32,"props":826,"children":827},{},[828,830,838,840,847,848,855],{"type":29,"value":829},"As the name suggests, load tests test your system under load. There are numerous tools available starting from a simple CLI tool like ",{"type":23,"tag":38,"props":831,"children":835},{"href":832,":target":40,"rel":833,"title":834},"https://httpd.apache.org/docs/2.4/programs/ab.html",[43],"Apache Benchmark Overview",[836],{"type":29,"value":837},"Apache Benchmark",{"type":29,"value":839}," to more sophisticated solutions with a GUI like ",{"type":23,"tag":38,"props":841,"children":845},{"href":842,":target":40,"rel":843,"title":844},"https://jmeter.apache.org/",[43],"jMeter",[846],{"type":29,"value":844},{"type":29,"value":446},{"type":23,"tag":38,"props":849,"children":853},{"href":850,":target":40,"rel":851,"title":852},"https://locust.io/",[43],"Locust",[854],{"type":29,"value":852},{"type":29,"value":856},". We recommend performing load testing in a separate environment similar in capacity to a production environment. This way we compare apples to apples. Before running the tests, make sure your monitoring is set up so you can see the metrics before, during, and after the test. Depending on your system, you might want to monitor your database throughput, CPU / Memory / Hard Disk usage of your application servers, etc.",{"type":23,"tag":24,"props":858,"children":860},{"id":859},"how-to-start-with-automated-testing",[861],{"type":29,"value":862},"How To Start With Automated Testing",{"type":23,"tag":32,"props":864,"children":865},{},[866],{"type":29,"value":867},"All it takes is just starting to do it. If you don‚Äôt have a test suite running, getting it to run and putting it on CI is the first step. There are several ways to give the team visibility into the health of your automated tests. You can enable CI notifications about the failed builds to go to Slack. Another helpful technique is exposing the CI status as a dashboard on a TV in the office. Once you have your tests running seeing your test data will become eye-opening. Even if your test suite has just a few tests.",{"type":23,"tag":32,"props":869,"children":870},{},[871],{"type":29,"value":872},"If you‚Äôre dealing with a monolithic tightly coupled system, the main thing is to start carving out some pieces of the monolith into smaller chunks which are easier to test in isolation. Step by step you‚Äôll be able to take your system under control.",{"type":23,"tag":24,"props":874,"children":876},{"id":875},"advanced-topics",[877],{"type":29,"value":878},"Advanced Topics",{"type":23,"tag":880,"props":881,"children":882},"ul",{},[883,894,905],{"type":23,"tag":417,"props":884,"children":885},{},[886],{"type":23,"tag":38,"props":887,"children":891},{"href":888,":target":40,"rel":889,"title":890},"https://www.objc.io/issues/15-testing/dependency-injection/",[43],"Objc.io issue on dependency injection and mocking",[892],{"type":29,"value":893},"Dependency Injection and Mocking",{"type":23,"tag":417,"props":895,"children":896},{},[897],{"type":23,"tag":38,"props":898,"children":902},{"href":899,":target":40,"rel":900,"title":901},"https://en.wikipedia.org/wiki/Random_testing",[43],"Data randomization in testing",[903],{"type":29,"value":904},"Data Randomization",{"type":23,"tag":417,"props":906,"children":907},{},[908],{"type":23,"tag":38,"props":909,"children":912},{"href":667,":target":40,"rel":910,"title":911},[43],"Mutation testing",[913],{"type":29,"value":914},"Mutation Testing",{"type":23,"tag":24,"props":916,"children":918},{"id":917},"book-references",[919],{"type":29,"value":920},"Book References",{"type":23,"tag":880,"props":922,"children":923},{},[924,935],{"type":23,"tag":417,"props":925,"children":926},{},[927],{"type":23,"tag":38,"props":928,"children":932},{"href":929,":target":40,"rel":930,"title":931},"https://www.amazon.com/gp/product/0131177052/ref=as_li_qf_asin_il_tl?ie=UTF8&tag=howtoprogramb-20&creative=9325&linkCode=as2&creativeASIN=0131177052&linkId=987b7883189add3eef3cd3b2c3f31b1d",[43],"Working with legacy code book",[933],{"type":29,"value":934},"Working With Legacy Code",{"type":23,"tag":417,"props":936,"children":937},{},[938],{"type":23,"tag":38,"props":939,"children":943},{"href":940,":target":40,"rel":941,"title":942},"https://www.amazon.com/gp/product/0134757599/ref=as_li_qf_asin_il_tl?ie=UTF8&tag=howtoprogramb-20&creative=9325&linkCode=as2&creativeASIN=0134757599&linkId=5afcd14ce8949fc392799e8d92ca6535",[43],"Refactoring book",[944],{"type":29,"value":945},"Refactoring",{"type":23,"tag":24,"props":947,"children":948},{"id":286},[949],{"type":29,"value":289},{"type":23,"tag":32,"props":951,"children":952},{},[953,955,962],{"type":29,"value":954},"Automated testing is a great way to make sure you write modular and robust code that always works. You get the proof that your system works as expected with every run. Adding more test cases to your system has a cumulative effect since you get the dividends with every run of your test suite. If writing automated tests is something new for your team, or you would like to improve your testing setup, don‚Äôt hesitate to reach out. ",{"type":23,"tag":38,"props":956,"children":959},{"href":957,"rel":958},"https://rightbalance.io",[43],[960],{"type":29,"value":961},"Right Balance",{"type":29,"value":963}," did it many times in the past.",{"title":7,"searchDepth":301,"depth":301,"links":965},[966,967,975,976,977,984,985,986,987],{"id":634,"depth":301,"text":637},{"id":645,"depth":301,"text":648,"children":968},[969,970,971,972,973,974],{"id":651,"depth":306,"text":654},{"id":677,"depth":306,"text":680},{"id":688,"depth":306,"text":691},{"id":699,"depth":306,"text":702},{"id":720,"depth":306,"text":723},{"id":731,"depth":306,"text":734},{"id":742,"depth":301,"text":745},{"id":753,"depth":301,"text":756},{"id":764,"depth":301,"text":767,"children":978},[979,980,981,982,983],{"id":770,"depth":306,"text":773},{"id":781,"depth":306,"text":784},{"id":792,"depth":306,"text":795},{"id":803,"depth":306,"text":806},{"id":821,"depth":306,"text":824},{"id":859,"depth":301,"text":862},{"id":875,"depth":301,"text":878},{"id":917,"depth":301,"text":920},{"id":286,"depth":301,"text":289},"content:solutions:automated-tests-get-dividends-with-every-test-run.md","solutions/automated-tests-get-dividends-with-every-test-run.md",{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":7,"tags":991,"related_content":992,"short_title":15,"header_one":15,"header_two":16,"icon":17,"cta_header":18,"body":993,"_type":326,"_id":327,"_source":328,"_file":329,"_extension":330},[10,11,12,13],[],{"type":20,"children":994,"toc":1183},[995,999,1009,1013,1023,1027,1031,1035,1039,1043,1047,1051,1055,1059,1063,1067,1073,1077,1081,1085,1089,1093,1097,1101,1105,1109,1113,1117,1121,1131,1135,1139,1143,1171,1175,1179],{"type":23,"tag":24,"props":996,"children":997},{"id":26},[998],{"type":29,"value":30},{"type":23,"tag":32,"props":1000,"children":1001},{},[1002,1003,1008],{"type":29,"value":36},{"type":23,"tag":38,"props":1004,"children":1006},{":target":40,"href":41,"rel":1005,"title":44},[43],[1007],{"type":29,"value":47},{"type":29,"value":49},{"type":23,"tag":51,"props":1010,"children":1011},{"id":53},[1012],{"type":29,"value":56},{"type":23,"tag":32,"props":1014,"children":1015},{},[1016,1017,1022],{"type":29,"value":61},{"type":23,"tag":38,"props":1018,"children":1020},{":target":40,"href":64,"rel":1019,"title":66},[43],[1021],{"type":29,"value":69},{"type":29,"value":71},{"type":23,"tag":51,"props":1024,"children":1025},{"id":74},[1026],{"type":29,"value":77},{"type":23,"tag":32,"props":1028,"children":1029},{},[1030],{"type":29,"value":82},{"type":23,"tag":24,"props":1032,"children":1033},{"id":85},[1034],{"type":29,"value":88},{"type":23,"tag":51,"props":1036,"children":1037},{"id":91},[1038],{"type":29,"value":94},{"type":23,"tag":32,"props":1040,"children":1041},{},[1042],{"type":29,"value":99},{"type":23,"tag":51,"props":1044,"children":1045},{"id":102},[1046],{"type":29,"value":105},{"type":23,"tag":32,"props":1048,"children":1049},{},[1050],{"type":29,"value":110},{"type":23,"tag":51,"props":1052,"children":1053},{"id":113},[1054],{"type":29,"value":116},{"type":23,"tag":32,"props":1056,"children":1057},{},[1058],{"type":29,"value":121},{"type":23,"tag":24,"props":1060,"children":1061},{"id":124},[1062],{"type":29,"value":127},{"type":23,"tag":32,"props":1064,"children":1065},{},[1066],{"type":29,"value":132},{"type":23,"tag":32,"props":1068,"children":1069},{},[1070],{"type":23,"tag":137,"props":1071,"children":1072},{"alt":139,"src":140},[],{"type":23,"tag":51,"props":1074,"children":1075},{"id":144},[1076],{"type":29,"value":147},{"type":23,"tag":32,"props":1078,"children":1079},{},[1080],{"type":29,"value":152},{"type":23,"tag":51,"props":1082,"children":1083},{"id":155},[1084],{"type":29,"value":158},{"type":23,"tag":32,"props":1086,"children":1087},{},[1088],{"type":29,"value":163},{"type":23,"tag":51,"props":1090,"children":1091},{"id":166},[1092],{"type":29,"value":169},{"type":23,"tag":32,"props":1094,"children":1095},{},[1096],{"type":29,"value":174},{"type":23,"tag":51,"props":1098,"children":1099},{"id":177},[1100],{"type":29,"value":180},{"type":23,"tag":32,"props":1102,"children":1103},{},[1104],{"type":29,"value":185},{"type":23,"tag":51,"props":1106,"children":1107},{"id":188},[1108],{"type":29,"value":191},{"type":23,"tag":32,"props":1110,"children":1111},{},[1112],{"type":29,"value":196},{"type":23,"tag":24,"props":1114,"children":1115},{"id":199},[1116],{"type":29,"value":202},{"type":23,"tag":51,"props":1118,"children":1119},{"id":205},[1120],{"type":29,"value":208},{"type":23,"tag":32,"props":1122,"children":1123},{},[1124,1125,1130],{"type":29,"value":213},{"type":23,"tag":38,"props":1126,"children":1128},{":target":40,"href":64,"rel":1127,"title":217},[43],[1129],{"type":29,"value":69},{"type":29,"value":221},{"type":23,"tag":51,"props":1132,"children":1133},{"id":224},[1134],{"type":29,"value":227},{"type":23,"tag":32,"props":1136,"children":1137},{},[1138],{"type":29,"value":232},{"type":23,"tag":51,"props":1140,"children":1141},{"id":235},[1142],{"type":29,"value":238},{"type":23,"tag":32,"props":1144,"children":1145},{},[1146,1147,1152,1153,1158,1159,1164,1165,1170],{"type":29,"value":243},{"type":23,"tag":38,"props":1148,"children":1150},{":target":40,"href":246,"rel":1149,"title":248},[43],[1151],{"type":29,"value":251},{"type":29,"value":253},{"type":23,"tag":38,"props":1154,"children":1156},{":target":40,"href":256,"rel":1155,"title":258},[43],[1157],{"type":29,"value":261},{"type":29,"value":263},{"type":23,"tag":38,"props":1160,"children":1162},{":target":40,"href":266,"rel":1161,"title":268},[43],[1163],{"type":29,"value":271},{"type":29,"value":273},{"type":23,"tag":38,"props":1166,"children":1168},{":target":40,"href":276,"rel":1167,"title":278},[43],[1169],{"type":29,"value":281},{"type":29,"value":283},{"type":23,"tag":24,"props":1172,"children":1173},{"id":286},[1174],{"type":29,"value":289},{"type":23,"tag":32,"props":1176,"children":1177},{},[1178],{"type":29,"value":294},{"type":23,"tag":32,"props":1180,"children":1181},{},[1182],{"type":29,"value":299},{"title":7,"searchDepth":301,"depth":301,"links":1184},[1185,1189,1194,1201,1206],{"id":26,"depth":301,"text":30,"children":1186},[1187,1188],{"id":53,"depth":306,"text":56},{"id":74,"depth":306,"text":77},{"id":85,"depth":301,"text":88,"children":1190},[1191,1192,1193],{"id":91,"depth":306,"text":94},{"id":102,"depth":306,"text":105},{"id":113,"depth":306,"text":116},{"id":124,"depth":301,"text":127,"children":1195},[1196,1197,1198,1199,1200],{"id":144,"depth":306,"text":147},{"id":155,"depth":306,"text":158},{"id":166,"depth":306,"text":169},{"id":177,"depth":306,"text":180},{"id":188,"depth":306,"text":191},{"id":199,"depth":301,"text":202,"children":1202},[1203,1204,1205],{"id":205,"depth":306,"text":208},{"id":224,"depth":306,"text":227},{"id":235,"depth":306,"text":238},{"id":286,"depth":301,"text":289},{"_path":1208,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":1209,"description":7,"tags":1210,"related_content":1216,"short_title":1217,"header_one":1218,"header_two":1219,"icon":1220,"cta_header":1221,"body":1222,"_type":326,"_id":1523,"_source":328,"_file":1524,"_extension":330},"/solutions/client-side-development-enlighten-your-users-with-the-best-user-experience","Client-Side Development: Enlighten Your Users With the Best User Experience",[1211,1212,1213,1214,1215],"client-side","web","mobile","desktop","iot",[],"Client-Side Development","Client-Side","Development","devices","Have any questions about Client-Side Development?",{"type":20,"children":1223,"toc":1508},[1224,1230,1235,1241,1246,1252,1304,1309,1315,1327,1333,1338,1371,1377,1382,1388,1393,1399,1404,1410,1415,1421,1426,1469,1494,1498,1503],{"type":23,"tag":24,"props":1225,"children":1227},{"id":1226},"what-is-client-side",[1228],{"type":29,"value":1229},"What is Client-Side",{"type":23,"tag":32,"props":1231,"children":1232},{},[1233],{"type":29,"value":1234},"Regardless of your rap music preference of the East Side vs the West Side, Client Side development is an important aspect of your engineering organization. Client-side development is centered around developing client-side applications. Mobile applications, websites, desktop apps are all examples of a client-side application. When your users interact with your product, the only thing they see is your client-side user interface. That‚Äôs why building your client-side applications right is crucial to deliver an enlightening user experience.",{"type":23,"tag":24,"props":1236,"children":1238},{"id":1237},"client-side-application-architecture",[1239],{"type":29,"value":1240},"Client-Side Application Architecture",{"type":23,"tag":32,"props":1242,"children":1243},{},[1244],{"type":29,"value":1245},"A typical client-side application consists of the following main components:",{"type":23,"tag":51,"props":1247,"children":1249},{"id":1248},"user-interface",[1250],{"type":29,"value":1251},"User Interface",{"type":23,"tag":32,"props":1253,"children":1254},{},[1255,1257,1264,1266,1274,1276,1284,1286,1294,1295,1302],{"type":29,"value":1256},"All visual elements like buttons, different color backgrounds, images, etc, and most of the interactions between them are your user interface. At this level, you‚Äôll work primarily with the layout frameworks like ",{"type":23,"tag":38,"props":1258,"children":1261},{"href":1259,"rel":1260,":target":40},"https://developer.apple.com/documentation/uikit",[43],[1262],{"type":29,"value":1263},"UIKit",{"type":29,"value":1265}," / ",{"type":23,"tag":38,"props":1267,"children":1271},{"href":1268,"rel":1269,"title":1270,":target":40},"https://developer.apple.com/xcode/swiftui/",[43],"Swift UI framework from Apple",[1272],{"type":29,"value":1273},"Swift UI",{"type":29,"value":1275}," for iOS, your favorite Javascript and CSS framework for your web application like ",{"type":23,"tag":38,"props":1277,"children":1281},{"href":1278,"rel":1279,"title":1280,":target":40},"https://reactjs.org/",[43],"React JS Framework",[1282],{"type":29,"value":1283},"React",{"type":29,"value":1285},", ",{"type":23,"tag":38,"props":1287,"children":1291},{"href":1288,"rel":1289,"title":1290,":target":40},"https://vuejs.org/",[43],"Vue JS Framework",[1292],{"type":29,"value":1293},"Vue.js",{"type":29,"value":1285},{"type":23,"tag":38,"props":1296,"children":1300},{"href":1297,"rel":1298,"title":1299,":target":40},"https://svelte.dev/",[43],"Svelte",[1301],{"type":29,"value":1299},{"type":29,"value":1303},", etc.",{"type":23,"tag":32,"props":1305,"children":1306},{},[1307],{"type":29,"value":1308},"All code powering your UI runs in the main thread of the application. The main thread is the thread responsible for rendering your UI. You want to be mindful of the operations you perform on the main thread. Heavy work should be offloaded to the background thread instead. This way the UI stays responsive and the users have some great user experience even if there is some heavy work happening in the background at the same time.",{"type":23,"tag":51,"props":1310,"children":1312},{"id":1311},"networking-layer",[1313],{"type":29,"value":1314},"Networking Layer",{"type":23,"tag":32,"props":1316,"children":1317},{},[1318,1320,1325],{"type":29,"value":1319},"The networking layer‚Äôs main purpose is to fetch and save the data to the ",{"type":23,"tag":38,"props":1321,"children":1322},{"href":333},[1323],{"type":29,"value":1324},"Backend API",{"type":29,"value":1326},". This layer performs the actual network requests, parses the data coming from the API. Last but not least, it saves the parsed data into the Data Store Layer in the shape the application expects it.",{"type":23,"tag":51,"props":1328,"children":1330},{"id":1329},"data-store",[1331],{"type":29,"value":1332},"Data Store",{"type":23,"tag":32,"props":1334,"children":1335},{},[1336],{"type":29,"value":1337},"The datastore layer is responsible for storing and persisting the data on the client (either in memory or on disk). UI layer gets its data from the store as it changes. The networking layer updates the data in the store as it comes from the API. This way both the UI layer and the networking layer are abstracted and decoupled from each other and can be developed independently.",{"type":23,"tag":32,"props":1339,"children":1340},{},[1341,1349,1351,1359,1361,1369],{"type":23,"tag":38,"props":1342,"children":1346},{"href":1343,"rel":1344,"title":1345},"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/index.html",[43],"CoreData framework",[1347],{"type":29,"value":1348},"CoreData",{"type":29,"value":1350}," on iOS, ",{"type":23,"tag":38,"props":1352,"children":1356},{"href":1353,"rel":1354,"title":1355,":target":40},"https://vuex.vuejs.org/",[43],"Vuex - a reactive store for Vue.js",[1357],{"type":29,"value":1358},"Vuex",{"type":29,"value":1360}," for Vue.js, ",{"type":23,"tag":38,"props":1362,"children":1366},{"href":1363,"rel":1364,"title":1365,":target":40},"https://redux.js.org/",[43],"Store for React",[1367],{"type":29,"value":1368},"Redux",{"type":29,"value":1370}," for React, are all examples of a data store for your client-side application.",{"type":23,"tag":24,"props":1372,"children":1374},{"id":1373},"focus-areas",[1375],{"type":29,"value":1376},"Focus areas",{"type":23,"tag":32,"props":1378,"children":1379},{},[1380],{"type":29,"value":1381},"Because your client-side applications‚Äô main function is to interact directly with the user, the primary focus is on the following areas.",{"type":23,"tag":51,"props":1383,"children":1385},{"id":1384},"look-and-feel",[1386],{"type":29,"value":1387},"Look and Feel",{"type":23,"tag":32,"props":1389,"children":1390},{},[1391],{"type":29,"value":1392},"Your users will be using your UI every single time they interact with your product. That‚Äôs why it‚Äôs important to have a beautiful, aesthetically pleasing design for your app. When you hold the phone with your application in your hands, or when you have it on the screen of your desktop computer, you should wow over how great the look and feel is. The elements should be clearly positioned on the screen, the user should be able to navigate to each part of the app effortlessly. Adding subtle animations to some UI elements where needed makes the application UI really pop.",{"type":23,"tag":51,"props":1394,"children":1396},{"id":1395},"performance",[1397],{"type":29,"value":1398},"Performance",{"type":23,"tag":32,"props":1400,"children":1401},{},[1402],{"type":29,"value":1403},"Your client-side application runs on a device with some limited resources. That‚Äôs why the performance is so important because you don‚Äôt have the infinitely scalable capacity like you have on the backend. The key here is to offload all heavy work from the main thread to the background thread. Being mindful of your memory usage and your disk usage goes a long way.",{"type":23,"tag":51,"props":1405,"children":1407},{"id":1406},"resiliency",[1408],{"type":29,"value":1409},"Resiliency",{"type":23,"tag":32,"props":1411,"children":1412},{},[1413],{"type":29,"value":1414},"Your backend server is always plugged into the outlet and has access to the Internet. Unfortunately, it‚Äôs not the case with client-side devices. Your user's phone or a laptop can lose Internet connectivity at any time, run out of a battery, or even run out of memory since the capacity is limited. Client-side operating systems are very aggressive with freeing up precious resources. On Android or iOS, your app can be just killed by the operating system at any time when your app is in the background. In addition to it, your app should never crash at all costs. An app crash has a massively negative impact on your user growth and retention. While implementing your features on the client, lean on the safe side, write a lot of safeguards and null checks. Save your data locally or on the server so you can pick up where you left off in case the user quits the app and opens it at a later time.",{"type":23,"tag":24,"props":1416,"children":1418},{"id":1417},"automated-testing-and-cicd",[1419],{"type":29,"value":1420},"Automated Testing and CI/CD",{"type":23,"tag":32,"props":1422,"children":1423},{},[1424],{"type":29,"value":1425},"Writing tests on the client is very straightforward at the networking level. You‚Äôll be able to write some good unit tests which are fast to execute. On another hand, UI testing is more complicated, less flexible, and that‚Äôs where you get the most coverage and benefit. That‚Äôs why we recommend writing most of the unit tests at the networking level and writing a few UI tests for the major flows in the app. While writing UI tests, it‚Äôs important to keep in mind that some elements can appear on the screen with some delays. In addition to it, it‚Äôs best to mock the network calls to avoid some unexpected test failures due to network latency.",{"type":23,"tag":32,"props":1427,"children":1428},{},[1429,1431,1439,1440,1448,1449,1457,1459,1467],{"type":29,"value":1430},"Another thing to keep in mind is that there are many variations of client devices, browsers, and operating systems. We recommend running your automated and manual tests on the farm of devices. ",{"type":23,"tag":38,"props":1432,"children":1436},{"href":1433,"rel":1434,"title":1435,":target":40},"https://aws.amazon.com/device-farm/",[43],"AWS Device Farm overview",[1437],{"type":29,"value":1438},"AWS Device Farm",{"type":29,"value":1285},{"type":23,"tag":38,"props":1441,"children":1445},{"href":1442,"rel":1443,"title":1444},"https://firebase.google.com/docs/test-lab",[43],"Firebase Test Lab page",[1446],{"type":29,"value":1447},"Firebase Test Lab",{"type":29,"value":1285},{"type":23,"tag":38,"props":1450,"children":1454},{"href":1451,"rel":1452,"title":1453,":target":40},"https://crossbrowsertesting.com/",[43],"Cross Browser Testing Page",[1455],{"type":29,"value":1456},"Cross Browser Testing",{"type":29,"value":1458},", or ",{"type":23,"tag":38,"props":1460,"children":1464},{"href":1461,"rel":1462,"title":1463,":target":40},"https://www.browserstack.com/",[43],"Browser Stack page",[1465],{"type":29,"value":1466},"Browser Stack",{"type":29,"value":1468}," are all great solutions you can use to solve this problem.",{"type":23,"tag":32,"props":1470,"children":1471},{},[1472,1474,1482,1484,1492],{"type":29,"value":1473},"Your CI/CD pipeline should be capable of testing and building your apps for testing and distribution. We recommend ",{"type":23,"tag":38,"props":1475,"children":1479},{"href":1476,"rel":1477,"title":1478,":target":40},"https://developer.apple.com/testflight/",[43],"TestFlight overview",[1480],{"type":29,"value":1481},"TestFlight",{"type":29,"value":1483}," for iOS, ",{"type":23,"tag":38,"props":1485,"children":1489},{"href":1486,"rel":1487,"title":1488,":target":40},"https://firebase.google.com/docs/app-distribution",[43],"Firebase page",[1490],{"type":29,"value":1491},"Firebase",{"type":29,"value":1493}," for Android. For your web and desktop applications, you can use your internal test environment.",{"type":23,"tag":24,"props":1495,"children":1496},{"id":286},[1497],{"type":29,"value":289},{"type":23,"tag":32,"props":1499,"children":1500},{},[1501],{"type":29,"value":1502},"As you can see, client-side development is a different beast from your backend or infrastructure development. With the main focus on look and feel, your app‚Äôs mission is to deliver the best user experience possible for the user while using the limited resources efficiently on the device. Due to the wide number of combinations of client devices and operating systems, it‚Äôs best to equip yourself with some cross-platform testing tools. Your CI/CD pipeline should be capable of building and distributing apps for testing and production use for all platforms.",{"type":23,"tag":32,"props":1504,"children":1505},{},[1506],{"type":29,"value":1507},"Diving into the client-side development can be overwhelming at first, especially coming from the backend side of things. If you need some help with getting things set up, don‚Äôt hesitate to reach out. We‚Äôve done it right many times for some great companies.",{"title":7,"searchDepth":301,"depth":301,"links":1509},[1510,1511,1516,1521,1522],{"id":1226,"depth":301,"text":1229},{"id":1237,"depth":301,"text":1240,"children":1512},[1513,1514,1515],{"id":1248,"depth":306,"text":1251},{"id":1311,"depth":306,"text":1314},{"id":1329,"depth":306,"text":1332},{"id":1373,"depth":301,"text":1376,"children":1517},[1518,1519,1520],{"id":1384,"depth":306,"text":1387},{"id":1395,"depth":306,"text":1398},{"id":1406,"depth":306,"text":1409},{"id":1417,"depth":301,"text":1420},{"id":286,"depth":301,"text":289},"content:solutions:client-side-development-enlighten-your-users-with-the-best-user-experience.md","solutions/client-side-development-enlighten-your-users-with-the-best-user-experience.md",{"_path":490,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":1526,"description":7,"cta_header":1527,"tags":1528,"related_content":1531,"short_title":1532,"header_one":1533,"header_two":1219,"icon":1534,"body":1535,"_type":326,"_id":1986,"_source":328,"_file":1987,"_extension":330},"Serverless Software Development: Focus on Features, instead of the Infrastructure","Have any questions about Serverless?",[1529,1530],"serverless","aws",[],"Serverless Software Development","Serverless","lambda",{"type":20,"children":1536,"toc":1961},[1537,1543,1548,1554,1560,1565,1571,1617,1627,1633,1638,1644,1658,1664,1670,1675,1681,1727,1733,1738,1744,1749,1755,1760,1767,1775,1780,1788,1793,1801,1808,1813,1821,1828,1833,1839,1850,1857,1880,1887,1899,1906,1917,1922,1929,1934,1939,1946,1951,1956],{"type":23,"tag":24,"props":1538,"children":1540},{"id":1539},"what-is-serverless",[1541],{"type":29,"value":1542},"What is Serverless",{"type":23,"tag":32,"props":1544,"children":1545},{},[1546],{"type":29,"value":1547},"Serverless, as the name implies, is a technology allowing you to run your backend applications without managing the server infrastructure. You deploy your code and your cloud provider manages the servers for you under the hood. It allows you to focus on your code minimizing the amount of effort spent on the infrastructure.",{"type":23,"tag":24,"props":1549,"children":1551},{"id":1550},"why-serverless-matters",[1552],{"type":29,"value":1553},"Why Serverless Matters",{"type":23,"tag":51,"props":1555,"children":1557},{"id":1556},"pay-per-use",[1558],{"type":29,"value":1559},"Pay per use",{"type":23,"tag":32,"props":1561,"children":1562},{},[1563],{"type":29,"value":1564},"No need to pay for idle servers. With Serverless, you only pay for the time it takes to run your application. If you aren‚Äôt using your system, you don‚Äôt incur any runtime costs. It‚Äôs ideal for your development, staging, and QA environments which aren‚Äôt used 24/7.",{"type":23,"tag":51,"props":1566,"children":1568},{"id":1567},"all-major-cloud-providers-support-serverless",[1569],{"type":29,"value":1570},"All major cloud providers support Serverless",{"type":23,"tag":32,"props":1572,"children":1573},{},[1574,1581,1582,1589,1590,1597,1599,1606,1608,1615],{"type":23,"tag":38,"props":1575,"children":1578},{"href":1576,"rel":1577,":target":40},"https://aws.amazon.com/serverless/",[43],[1579],{"type":29,"value":1580},"Amazon AWS",{"type":29,"value":1285},{"type":23,"tag":38,"props":1583,"children":1586},{"href":1584,"rel":1585,":target":40},"https://cloud.google.com/serverless",[43],[1587],{"type":29,"value":1588},"Google GCP",{"type":29,"value":1285},{"type":23,"tag":38,"props":1591,"children":1594},{"href":1592,"rel":1593,":target":40},"https://azure.microsoft.com/en-us/solutions/serverless/",[43],[1595],{"type":29,"value":1596},"Microsoft Azure",{"type":29,"value":1598},", and many more providers support Serverless technology. Most of them continue to integrate Serverless further into more of their products. We‚Äôre already seeing ",{"type":23,"tag":38,"props":1600,"children":1603},{"href":1601,"rel":1602,":target":40},"https://aws.amazon.com/rds/aurora/serverless/",[43],[1604],{"type":29,"value":1605},"Amazon Aurora Serverless",{"type":29,"value":1607}," database and ",{"type":23,"tag":38,"props":1609,"children":1612},{"href":1610,"rel":1611,":target":40},"https://aws.amazon.com/fargate/",[43],[1613],{"type":29,"value":1614},"Fargate Container",{"type":29,"value":1616}," engine following the same Serverless principles of paying for only when the resources are used. Serverless is entering the mainstream phase now. There are plenty of resources and libraries online to help you.",{"type":23,"tag":32,"props":1618,"children":1619},{},[1620],{"type":23,"tag":137,"props":1621,"children":1626},{"alt":1622,"className":1623,"src":1625},"Cloud Providers",[1624],"left","https://images.rightbalance.io/uploads/cloud-providers.svg",[],{"type":23,"tag":51,"props":1628,"children":1630},{"id":1629},"infinitely-scalable",[1631],{"type":29,"value":1632},"Infinitely Scalable",{"type":23,"tag":32,"props":1634,"children":1635},{},[1636],{"type":29,"value":1637},"Serverless resources grow and shrink automatically with your demand. More Serverless resources are spawned up when more requests are coming. If there are no requests at all, no resources are running.",{"type":23,"tag":51,"props":1639,"children":1641},{"id":1640},"be-at-the-forefront-of-technology",[1642],{"type":29,"value":1643},"Be At the Forefront of Technology",{"type":23,"tag":32,"props":1645,"children":1646},{},[1647,1649,1656],{"type":29,"value":1648},"Running on your own hardware is complicated and unnecessary (unless you‚Äôre at a scale of Google or Amazon), so as running on dedicated virtualized servers (like ",{"type":23,"tag":38,"props":1650,"children":1653},{"href":1651,"rel":1652,":target":40},"https://aws.amazon.com/ec2/",[43],[1654],{"type":29,"value":1655},"AWS EC2",{"type":29,"value":1657},"). Over the next 5 years, Serverless will become the norm and a default choice for new development. Working with new technology is exciting for you and your team! Don‚Äôt miss the opportunity to be ahead of the game instead of playing catch up.",{"type":23,"tag":24,"props":1659,"children":1661},{"id":1660},"business-problems-serverless-solves",[1662],{"type":29,"value":1663},"Business Problems Serverless Solves",{"type":23,"tag":51,"props":1665,"children":1667},{"id":1666},"power-your-websites-mobile-apps-and-iot-devices",[1668],{"type":29,"value":1669},"Power your Websites, Mobile Apps, and IoT Devices",{"type":23,"tag":32,"props":1671,"children":1672},{},[1673],{"type":29,"value":1674},"Serverless functions plugs in directly into your API Gateway or GraphQL endpoints. This means they can power your client applications like mobile apps, websites, IoT devices, and the rest of the backend microservices.",{"type":23,"tag":51,"props":1676,"children":1678},{"id":1677},"deliver-relevant-data-to-stakeholders",[1679],{"type":29,"value":1680},"Deliver relevant data to stakeholders",{"type":23,"tag":32,"props":1682,"children":1683},{},[1684,1686,1693,1694,1701,1702,1709,1710,1717,1718,1725],{"type":29,"value":1685},"In our day and age, having access to the relevant data is everything. It‚Äôs very straightforward to connect your serverless function to a queue, a pub-sub system, a database or even your file storage bucket. In the case of AWS, all of the major data services like ",{"type":23,"tag":38,"props":1687,"children":1690},{"href":1688,"rel":1689,":target":40},"https://aws.amazon.com/s3/",[43],[1691],{"type":29,"value":1692},"S3",{"type":29,"value":1285},{"type":23,"tag":38,"props":1695,"children":1698},{"href":1696,"rel":1697,":target":40},"https://aws.amazon.com/dynamodb/",[43],[1699],{"type":29,"value":1700},"DynamoDB",{"type":29,"value":1285},{"type":23,"tag":38,"props":1703,"children":1706},{"href":1704,"rel":1705,":target":40},"https://aws.amazon.com/rds/",[43],[1707],{"type":29,"value":1708},"RDS",{"type":29,"value":1285},{"type":23,"tag":38,"props":1711,"children":1714},{"href":1712,"rel":1713,":target":40},"https://aws.amazon.com/sns/",[43],[1715],{"type":29,"value":1716},"SNS",{"type":29,"value":1285},{"type":23,"tag":38,"props":1719,"children":1722},{"href":1720,"rel":1721,":target":40},"https://aws.amazon.com/sqs/",[43],[1723],{"type":29,"value":1724},"SQS",{"type":29,"value":1726}," all support the ability to trigger a serverless function to take the data that just arrived, transform it and deliver it to some relevant parties. No need to build some brutal long-running ETL jobs introducing some update delays. Process the data as it comes in, and deliver it to your data warehouse close to real-time.",{"type":23,"tag":51,"props":1728,"children":1730},{"id":1729},"reduce-infrastructure-cost",[1731],{"type":29,"value":1732},"Reduce Infrastructure Cost",{"type":23,"tag":32,"props":1734,"children":1735},{},[1736],{"type":29,"value":1737},"No need to pay for your servers sitting around doing no work, right? Same for your database, if it‚Äôs not being used in your QA environment overnight, why pay for it? By moving more and more resources to Serverless, you reduce your costs and make your CFO happy üí∏",{"type":23,"tag":51,"props":1739,"children":1741},{"id":1740},"increase-development-velocity",[1742],{"type":29,"value":1743},"Increase Development Velocity",{"type":23,"tag":32,"props":1745,"children":1746},{},[1747],{"type":29,"value":1748},"Business opportunities come and go quickly. Being able to develop your software fast, deploy it, and have it run automatically is key for growing your business. Serverless technology allows you to do exactly that. Just focus on your features and let your cloud provider take care of the infrastructure for you.",{"type":23,"tag":51,"props":1750,"children":1752},{"id":1751},"handle-traffic-spikes-seamlessly",[1753],{"type":29,"value":1754},"Handle Traffic Spikes Seamlessly",{"type":23,"tag":32,"props":1756,"children":1757},{},[1758],{"type":29,"value":1759},"Ever got a notification about your servers going down because of a marketing campaign bringing more traffic? With a well-architected Serverless system, with all bottlenecks removed (or moved to Serverless) you‚Äôll be able to support any unexpected spike in traffic. With more traffic coming to the system, more serverless functions are spawned up to support the increasing demand. And when the traffic is tailing off, fewer serverless functions are invoked to keep your system cost-effective.",{"type":23,"tag":24,"props":1761,"children":1764},{"id":13,"className":1762},[1763],"heading",[1765],{"type":29,"value":1766},"Solution",{"type":23,"tag":51,"props":1768,"children":1772},{"id":1769,"className":1770},"strong-architecture",[1771],"subheading",[1773],{"type":29,"value":1774},"Strong Architecture",{"type":23,"tag":32,"props":1776,"children":1777},{},[1778],{"type":29,"value":1779},"Putting together some solid architecture goes a long way. To take advantage of Serverless technology, the key is to start thinking about your feature development in a new way.",{"type":23,"tag":477,"props":1781,"children":1785},{"id":1782,"className":1783},"microservices",[1784],"subsubheading",[1786],{"type":29,"value":1787},"Microservices",{"type":23,"tag":32,"props":1789,"children":1790},{},[1791],{"type":29,"value":1792},"Monolithic architectures don‚Äôt scale well. To take advantage of an Infinitely Scalable Serverless technology, we need to start thinking about our systems as a set of modules. One module for user management, another module for order processing, and so on, and so forth. All modules (aka microservices) are talking to each other forming a robust scalable system where each module can be scaled individually as opposed to scaling the entire monolith.",{"type":23,"tag":32,"props":1794,"children":1795},{},[1796],{"type":23,"tag":137,"props":1797,"children":1800},{"alt":1798,"src":1799},"Illustrating the difference between monolith and microservices","https://images.rightbalance.io/uploads/monolith-microservices-2.svg",[],{"type":23,"tag":477,"props":1802,"children":1805},{"id":1803,"className":1804},"event-driven-programming",[1784],[1806],{"type":29,"value":1807},"Event-Driven Programming",{"type":23,"tag":32,"props":1809,"children":1810},{},[1811],{"type":29,"value":1812},"Software systems are built to automate complex processes. Each process consists of some operations. If all operations are a sequential set of steps built in a monolithic way, it‚Äôs hard to scale it, hard to maintain it and develop it because all steps are tightly coupled. To take full advantage of Serverless, we‚Äôll need to break down the complex processes into individual steps triggered by events. An example is triggering a Lambda function when a file gets uploaded to an S3 bucket. Once the file arrives, the Lambda gets triggered to process a file and write it to a data warehouse. Doing so allows us to use AWS Lambda being able to process as many files as we want to lean on the cloud provider to do the scaling work for us.",{"type":23,"tag":32,"props":1814,"children":1815},{},[1816],{"type":23,"tag":137,"props":1817,"children":1820},{"alt":1818,"src":1819},"Event driven programming illustration","https://images.rightbalance.io/uploads/event-driven-programming-2.svg",[],{"type":23,"tag":477,"props":1822,"children":1825},{"id":1823,"className":1824},"automatic-deployments-ci-cd",[1784],[1826],{"type":29,"value":1827},"Automatic Deployments (CI/CD)",{"type":23,"tag":32,"props":1829,"children":1830},{},[1831],{"type":29,"value":1832},"By automating away the process of deploying our code to the cloud, we enable our developers to focus on what matters most: writing code for new features. To do so, we build an automated deployment pipeline which consists of the following major steps:",{"type":23,"tag":32,"props":1834,"children":1835},{},[1836],{"type":23,"tag":137,"props":1837,"children":1838},{"alt":139,"src":140},[],{"type":23,"tag":32,"props":1840,"children":1841},{},[1842,1844,1849],{"type":29,"value":1843},"You can read more about CI/CD pipelines in our ",{"type":23,"tag":38,"props":1845,"children":1846},{"href":4},[1847],{"type":29,"value":1848},"CI/CD solution",{"type":29,"value":532},{"type":23,"tag":51,"props":1851,"children":1854},{"id":1852,"className":1853},"efficient-monitoring-and-alerting",[1771],[1855],{"type":29,"value":1856},"Efficient Monitoring and Alerting",{"type":23,"tag":32,"props":1858,"children":1859},{},[1860,1862,1869,1871,1878],{"type":29,"value":1861},"Each cloud provider has a specific set of metrics associated with each Serverless resource. In the case of AWS Lambda, it reports the number of invocations, logs for each lambda, number of failures, and more metrics into ",{"type":23,"tag":38,"props":1863,"children":1866},{"href":1864,"rel":1865,":target":40},"https://aws.amazon.com/cloudwatch/",[43],[1867],{"type":29,"value":1868},"CloudWatch",{"type":29,"value":1870},". We can set the alerts on our CloudWatch metrics to report to Slack, Email, and Text when some unusual activity happens. To make our monitoring efficient, our alerts will be precise and specific. So when they arrive, it‚Äôs clear what happened and what to do next. Each alert has a severity level. If something is slightly off, it can go to Slack or email. And for some critical component outages, it can go to text or perhaps even a call for an on-call person using a ",{"type":23,"tag":38,"props":1872,"children":1875},{"href":1873,"rel":1874,":target":40},"https://www.pagerduty.com/",[43],[1876],{"type":29,"value":1877},"PagerDuty",{"type":29,"value":1879}," alert.",{"type":23,"tag":51,"props":1881,"children":1884},{"id":1882,"className":1883},"automated-testing",[1771],[1885],{"type":29,"value":1886},"Automated Testing",{"type":23,"tag":32,"props":1888,"children":1889},{},[1890,1892,1897],{"type":29,"value":1891},"Manual testing is great with one drawback: you need to do it again and again every time you push new code. Which leads to a costly big bang releases that are no fun. You don‚Äôt want to waste your precious engineering time on manual testing. Instead, writing a comprehensive set of unit tests, functional tests, and integration tests will go a long way. You can add them to your ",{"type":23,"tag":38,"props":1893,"children":1894},{"href":4},[1895],{"type":29,"value":1896},"CI build pipeline",{"type":29,"value":1898}," to run every time you deploy your code automatically.",{"type":23,"tag":24,"props":1900,"children":1903},{"id":1901,"className":1902},"execution",[1763],[1904],{"type":29,"value":1905},"Execution",{"type":23,"tag":32,"props":1907,"children":1908},{},[1909,1915],{"type":23,"tag":38,"props":1910,"children":1913},{"href":1911,"rel":1912},"http://rightbalance.io/",[43],[1914],{"type":29,"value":961},{"type":29,"value":1916}," is your development partner helping you seamlessly integrate Serverless into your technology stack. The Right Balance team helped many successful businesses to use Serverless to achieve their business goals. Most of the companies are running on the latest and greatest technology stack, producing a lot of features with increased velocity. Companies running on the latest technology stack is a fun and exciting place to work in. This helps with attracting some quality candidates in the current competitive job market.",{"type":23,"tag":32,"props":1918,"children":1919},{},[1920],{"type":29,"value":1921},"When it comes to integrating new technology, it can be integrated in the following ways:",{"type":23,"tag":51,"props":1923,"children":1926},{"id":1924,"className":1925},"gradual-integration",[1771],[1927],{"type":29,"value":1928},"Gradual Integration",{"type":23,"tag":32,"props":1930,"children":1931},{},[1932],{"type":29,"value":1933},"When the current system needs to stay in place and it still functions well, a gradual introduction of new technology makes the most sense. The advantage of such an approach is that it‚Äôs flexible. It allows for the existing feature development to continue on the current platform while introducing new technology at the same time without any disruption.",{"type":23,"tag":32,"props":1935,"children":1936},{},[1937],{"type":29,"value":1938},"In this case, we‚Äôll start with integrating Serverless into one part of the overall system. Writing a new microservice from scratch and connecting it with the rest of the system using some API calls allows putting the architectural patterns in place laying out the groundwork for new development. Once the initial architecture is in place, we can expand further with either migrating the current platform over to the new stack step by step or continue on the new stack for the new feature development.",{"type":23,"tag":51,"props":1940,"children":1943},{"id":1941,"className":1942},"system-rewrite",[1771],[1944],{"type":29,"value":1945},"System Rewrite",{"type":23,"tag":32,"props":1947,"children":1948},{},[1949],{"type":29,"value":1950},"In the case where the entire system doesn‚Äôt perform to its expectations when the current feature development is extremely slow and the existing staff doesn‚Äôt want to deal with the system anymore, it‚Äôs easier and more effective to rewrite the entire system all at once.",{"type":23,"tag":32,"props":1952,"children":1953},{},[1954],{"type":29,"value":1955},"Here, we‚Äôll build an entirely new system on the latest technology stack while having the old system running. Then we‚Äôll start migrating the user data over to the new system. Once the migration is complete, we‚Äôll switch over to the new system and turn off the old one. The users will see a new system as just a regular upgrade next time they log in.",{"type":23,"tag":32,"props":1957,"children":1958},{},[1959],{"type":29,"value":1960},"This is also a great opportunity to delight a user with some new features only available on a new system. In addition to it, it‚Äôs a great time to update the look and feel of the product on the front end.",{"title":7,"searchDepth":301,"depth":301,"links":1962},[1963,1964,1970,1977,1982],{"id":1539,"depth":301,"text":1542},{"id":1550,"depth":301,"text":1553,"children":1965},[1966,1967,1968,1969],{"id":1556,"depth":306,"text":1559},{"id":1567,"depth":306,"text":1570},{"id":1629,"depth":306,"text":1632},{"id":1640,"depth":306,"text":1643},{"id":1660,"depth":301,"text":1663,"children":1971},[1972,1973,1974,1975,1976],{"id":1666,"depth":306,"text":1669},{"id":1677,"depth":306,"text":1680},{"id":1729,"depth":306,"text":1732},{"id":1740,"depth":306,"text":1743},{"id":1751,"depth":306,"text":1754},{"id":13,"depth":301,"text":1766,"children":1978},[1979,1980,1981],{"id":1769,"depth":306,"text":1774},{"id":1852,"depth":306,"text":1856},{"id":1882,"depth":306,"text":1886},{"id":1901,"depth":301,"text":1905,"children":1983},[1984,1985],{"id":1924,"depth":306,"text":1928},{"id":1941,"depth":306,"text":1945},"content:solutions:serverless-software-development-focus-on-features-instead-of-the-infrastructure.md","solutions/serverless-software-development-focus-on-features-instead-of-the-infrastructure.md",1723605765158]