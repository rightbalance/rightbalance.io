[{"_path":"/solutions/ci-cd-like-ac-dc-rock-n-roll-with-continuous-integration-and-continuous-delivery","_dir":"solutions","_draft":false,"_partial":false,"_locale":"","title":"CI/CD like AC‚ö°Ô∏èDC: Rock‚Äôn‚ÄôRoll with Continuous Integration and Continuous Delivery","description":"","tags":["cicd","ci","cd","solution"],"related_content":[],"short_title":"CI / CD","header_one":"CI / CD","header_two":"Pipelines","icon":"pipe-disconnected","cta_header":"Have any questions about CI/CD?","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"what-is-cicd"},"children":[{"type":"text","value":"What is CI/CD"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"CI/CD is an abbreviation for Continuous Integration and Continuous Delivery. It‚Äôs a process of delivering your code continuously using an automated pipeline as opposed to doing a manual one "},{"type":"element","tag":"a","props":{":target":"\\_blank","href":"https://svpg.com/big-bang-releases/","rel":["nofollow"],"title":"Big bang deployment overview"},"children":[{"type":"text","value":"big bang"}]},{"type":"text","value":" waterfall deployment."}]},{"type":"element","tag":"h3","props":{"id":"continuous-integration"},"children":[{"type":"text","value":"Continuous Integration"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Most of the software teams use a source control system like Git. We‚Äôve several different branching strategies like "},{"type":"element","tag":"a","props":{":target":"\\_blank","href":"https://nvie.com/posts/a-successful-git-branching-model/","rel":["nofollow"],"title":"Git flow branching strategy"},"children":[{"type":"text","value":"Git Flow"}]},{"type":"text","value":". All of the strategies have one thing in common. There is a single mainline development branch. Each developer creates his/her own branch of the mainline and works independently on a feature. Once the feature is ready, the code is reviewed and merged back to the mainline."}]},{"type":"element","tag":"h3","props":{"id":"continuous-delivery"},"children":[{"type":"text","value":"Continuous Delivery"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now that the code is merged into the mainline, we need to go through the rest of the steps like deploying it, doing QA, and eventually, pushing the new code to production to serve some real users. Each step involves some build process that has to happen to build, test, and deliver the code to the right place. This is where an automated pipeline comes into play where each step is automated following some established conventions everyone on the team follows."}]},{"type":"element","tag":"h2","props":{"id":"advantages-of-using-cicd"},"children":[{"type":"text","value":"Advantages of using CI/CD"}]},{"type":"element","tag":"h3","props":{"id":"speed"},"children":[{"type":"text","value":"Speed"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The main advantage of CI/CD is the increase in velocity. Once you have the process and the pipeline in place, you‚Äôll be able to ship your changes faster. As with any process, it‚Äôs just more efficient to do the same steps over and over again rather than shipping changes ad-hoc differently each time. It removes the need for extra communication between the team members and between different teams. Everyone follows the same process. Developers know where to merge to code. QA team knows where to get a new build to test. It‚Äôs clear how to deploy to each environment including production and how to troubleshoot some issues."}]},{"type":"element","tag":"h3","props":{"id":"quality"},"children":[{"type":"text","value":"Quality"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"CI/CD brings some automation allowing you to take advantage of automated tests, having your compiler catch bugs, and your automated deployments exercising your infrastructure. With all the automation in place, you start investing in the health of your system, getting some dividends with each test added instead of playing catchup using some manual testing. Every run of your pipeline runs hundreds (and sometimes even more) of automated tests to make sure your product is rock solid when it comes to production."}]},{"type":"element","tag":"h3","props":{"id":"consistency"},"children":[{"type":"text","value":"Consistency"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As we all know, humans are inconsistent, and computers are great at doing the same thing over and over again. No human will be able to build, test, and deploy your changes multiple times a day consistently. Automated pipelines, when done right, always work for you. Consistency makes your compliance process easier to maintain. And while the CI server is running your pipeline, you have your developers writing some new features. Which is more fun than building and deploying anyway üòâ."}]},{"type":"element","tag":"h2","props":{"id":"anatomy-of-a-cicd-pipeline"},"children":[{"type":"text","value":"Anatomy of a CI/CD Pipeline"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Most of the automated pipelines consist of the following major steps:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"A typical CI/CD pipeline","src":"https://images.rightbalance.io/uploads/cicd-pipeline.svg"},"children":[]}]},{"type":"element","tag":"h3","props":{"id":"build"},"children":[{"type":"text","value":"Build"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"While developers make their changes, we want to make sure the code builds into a runnable product. Here, we run a compiler and/or linter for scripting based languages to make sure we‚Äôre able to run the code."}]},{"type":"element","tag":"h3","props":{"id":"test"},"children":[{"type":"text","value":"Test"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The next step is to test your code. We run our automated tests to make sure the code we built does what we expect it to do. At this step, we‚Äôll catch any bugs that happen along the way so the developer can fix them early in the process before they go out to the real world."}]},{"type":"element","tag":"h3","props":{"id":"deploy"},"children":[{"type":"text","value":"Deploy"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now the code is built and tested, let‚Äôs go ahead and deploy it to a real environment. We‚Äôll package the code for deployment including the necessary libraries and the configuration. Once it‚Äôs ready for us to push, we deploy it directly to the cloud provider using their API."}]},{"type":"element","tag":"h3","props":{"id":"verify"},"children":[{"type":"text","value":"Verify"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Once the code is deployed, we‚Äôll run some comprehensive, non-destructive tests against a deployed environment to make sure the code runs in the cloud the way we expect it to run."}]},{"type":"element","tag":"h3","props":{"id":"notify"},"children":[{"type":"text","value":"Notify"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Once the pipeline is finished running, we notify the developer of the successful deployment. Most of the notifications go to slack or email. Important to note that if failures happen along the way, the pipeline notifies the developer of the failed step so the action can be taken promptly."}]},{"type":"element","tag":"h2","props":{"id":"how-you-can-implement-cicd"},"children":[{"type":"text","value":"How You Can Implement CI/CD"}]},{"type":"element","tag":"h3","props":{"id":"lock-in-your-branching-strategy"},"children":[{"type":"text","value":"Lock in Your Branching Strategy"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We recommend following "},{"type":"element","tag":"a","props":{":target":"\\_blank","href":"https://nvie.com/posts/a-successful-git-branching-model/","rel":["nofollow"],"title":"Git Flow Overview"},"children":[{"type":"text","value":"Git Flow"}]},{"type":"text","value":" or some variation of it. Making sure everyone follows the same process for branching makes everything easier. If you have multiple environments (like development, staging, and production) you may want to name your branches the same way so it‚Äôs easy to map the branches to the environments the code should be deployed to."}]},{"type":"element","tag":"h3","props":{"id":"build-test-deploy"},"children":[{"type":"text","value":"Build, Test, Deploy"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Chances are, you either already have a way to build, test, and deploy your code. The goal here is to distill it down to a single command you can run from your terminal. If your build process involves running multiple commands, no problem, we‚Äôll just write a build script running each step. If you don‚Äôt have automated tests, the best first step is to set up a testing framework and add it to the CI pipeline. Once tests run automatically, it‚Äôs easy to add them one by one gradually. Last but not least, your deployment has to happen using a single command. What we‚Äôve seen in the past is that a lot of software teams end up with a large spreadsheet of steps to run for each release. Worry not, each of those massive spreadsheets can be distilled down to a single command step by step."}]},{"type":"element","tag":"h3","props":{"id":"pipeline-it"},"children":[{"type":"text","value":"Pipeline it"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now you have all your steps in order, it‚Äôs easy to put it together into a pipeline. There are numerous technology choices starting from self-hosted options like "},{"type":"element","tag":"a","props":{":target":"\\_blank","href":"https://jenkins.io/","rel":["nofollow"],"title":"Jenkins Website"},"children":[{"type":"text","value":"Jenkins"}]},{"type":"text","value":" all the way to some hosted solutions like "},{"type":"element","tag":"a","props":{":target":"\\_blank","href":"https://circleci.com/","rel":["nofollow"],"title":"CircleCI website"},"children":[{"type":"text","value":"CircleCI"}]},{"type":"text","value":" and "},{"type":"element","tag":"a","props":{":target":"\\_blank","href":"https://azure.microsoft.com/en-us/services/devops/pipelines/","rel":["nofollow"],"title":"Azure Pipelines - CI/CD from Azure"},"children":[{"type":"text","value":"Azure Pipelines"}]},{"type":"text","value":". It all depends on your system and your current technology stack. At this point, it comes down to either creating an account for a hosted CI provider or standing up Jenkins inside your infrastructure and wiring the steps together with some configuration files using YAML or similar configuration language. Yes, we want our infrastructure to "},{"type":"element","tag":"a","props":{":target":"\\_blank","href":"https://en.wikipedia.org/wiki/Infrastructure_as_code","rel":["nofollow"],"title":"IAC overview"},"children":[{"type":"text","value":"run as code"}]},{"type":"text","value":" so we can stand it up at any time."}]},{"type":"element","tag":"h2","props":{"id":"conclusion"},"children":[{"type":"text","value":"Conclusion"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"CI/CD is key to increasing velocity, developer productivity, and it‚Äôs just more fun to focus on features. Which in turn drives the business forward. If you‚Äôre in a manual world without the pipeline or perhaps even without the automated tests in place, starting on CI/CD route might seem like an overwhelming task. Worry not, with the right processes in place and some persistence, you‚Äôll get to a place where all you do is push some new code and let the pipeline do the rest of the magic."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you would like to get some help with implementing CI/CD into your organization, don‚Äôt hesitate to reach out. We‚Äôve done numerous automated CI/CD pipelines for mobile apps, websites, API services, ETL, Serverless systems, and more."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"what-is-cicd","depth":2,"text":"What is CI/CD","children":[{"id":"continuous-integration","depth":3,"text":"Continuous Integration"},{"id":"continuous-delivery","depth":3,"text":"Continuous Delivery"}]},{"id":"advantages-of-using-cicd","depth":2,"text":"Advantages of using CI/CD","children":[{"id":"speed","depth":3,"text":"Speed"},{"id":"quality","depth":3,"text":"Quality"},{"id":"consistency","depth":3,"text":"Consistency"}]},{"id":"anatomy-of-a-cicd-pipeline","depth":2,"text":"Anatomy of a CI/CD Pipeline","children":[{"id":"build","depth":3,"text":"Build"},{"id":"test","depth":3,"text":"Test"},{"id":"deploy","depth":3,"text":"Deploy"},{"id":"verify","depth":3,"text":"Verify"},{"id":"notify","depth":3,"text":"Notify"}]},{"id":"how-you-can-implement-cicd","depth":2,"text":"How You Can Implement CI/CD","children":[{"id":"lock-in-your-branching-strategy","depth":3,"text":"Lock in Your Branching Strategy"},{"id":"build-test-deploy","depth":3,"text":"Build, Test, Deploy"},{"id":"pipeline-it","depth":3,"text":"Pipeline it"}]},{"id":"conclusion","depth":2,"text":"Conclusion"}]}},"_type":"markdown","_id":"content:solutions:ci-cd-like-ac-dc-rock-n-roll-with-continuous-integration-and-continuous-delivery.md","_source":"content","_file":"solutions/ci-cd-like-ac-dc-rock-n-roll-with-continuous-integration-and-continuous-delivery.md","_extension":"md"}]